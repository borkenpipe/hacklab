#!/bin/bash

. logger-support
. buildroot-paths

usage()
{
cat << EOF
usage: $0 options

OPTIONS:
   -h      Show this message.
   -d      Debug messages on, implies verbose.
   -v      Verbose messages on.
   -b      Directory or tar.gz of buildroot.
   -s      Skip menuconfig.
   -y      Don't bother the user and just say yes.
EOF
}

SKIPCONFIG="no"
YESJUSTDOIT="no"
while getopts “hdvb:sy” OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        d)
            DEBUG="yes"
            VERBOSE="yes"
            ;;
        v)
            VERBOSE="yes"
            ;;
        b)
            BUILDROOT=$OPTARG
            ;;
        s)
            SKIPCONFIG="yes"
            ;;
        y)
            YESJUSTDOIT="yes"
            ;;
        ?)
            usage
            exit
            ;;
    esac
done

debug_pause "Let's start cooking some buildroot tools"

if [ ! -d $DESTBUILDDIR ] ; then
    mkdir -v $DESTBUILDDIR
fi

cd $DESTBUILDDIR || fail "Expected "
debug_pause "Entered $DESTBUILDDIR"

LAST HERE

info "Get $BUILDROOT"
if tar -tzf $BUILDROOT &>  /dev/null ; then
    verbose "Untarring $BUILDROOT"
    tar -zxvf $BUILDROOT
    BUILDROOT=$(echo $BUILDROOT | sed 's/.tar.gz//')
elif [ -d $BUILDROOT ] ; then
    BUILDROOT=$BUILDROOT
else
    fail "Not a tar or directory \$BUILDROOT:$BUILDROOT"
fi

cd $BUILDROOT || fail "Expected $BUILDROOT to exist"

mv -v "$BUILDROOTCONIFGOLD"{,.last}
cp  -v "$BUILDROOTCONIFGNEW" "$BUILDROOTCONIFGOLD"

echo ""
echo -n "You are about to build a GCC cross compiler. You will need to configure the following:

    o Target Architecture          - This is one of: armeb, mipsel, etc.
    o Target Architecture Variant  - If in doubt, use the 'generic' variant.
    o Target ABI                   - If in doubt, OABI is typically the safest choice.

When finished, exit menuconfig and save your new configuration when prompted. Ready? [Y/n] "
if [ "x$YESJUSTDOIT" == "xyes" ] ; then
    ANSWER="yes"
else
    read ANSWER
fi

if ! isyes $ANSWER
then
    echo "Quitting..."
    cleanup
    exit 1
fi

if [ "x$SKIPCONFIG" == "xyes" ] ; then
    verbose "Skip menu config"
else
    make menuconfig
    info "menuconfig complete. "
fi

if [ ! "$(diff -qs $(pwd)/.config "$BUILDROOTCONIFGNEW" | grep 'identical')" == "" ] ; then
else
    ANSWER="no"
    if isyes $ANSWER ; then
        cleanup
        fail "Configuration changes were not saved! Quitting..."
    fi
fi 

ARCH=$(grep 'BR2_ARCH=' .config | cut -d'"' -f2)
ORIG_ARCH=$ARCH
ENDIAN=$(grep 'BR2_ENDIAN=' .config | cut -d'"' -f2)
GCC_TARGET_ARCH=$(grep 'BR2_GCC_TARGET_ARCH=' .config | cut -d'"' -f2)
GCC_TARGET_ABI=$(grep 'BR2_GCC_TARGET_ABI=' .config | cut -d'"' -f2)

BUILDNAME=$ARCH\_$ENDIAN\_$GCC_TARGET_ARCH\_$GCC_TARGET_ABI

echo -n "Building GCC cross compiler for the '$BUILDNAME ' arch/endian/gccarch/gccabi. Is this correct? [Y/n] "
if [ "x$YESJUSTDOIT" == "xyes" ] ; then
    ANSWER="yes"
else
    read ANSWER
fi

if ! isyes $ANSWER
then
    ARCH=""

    while [ "$ARCH" == "" ]
    do
        echo -n "Please name this architecture: "
        read ARCH
    done
fi

DESTGCCARCH=$DESTGCC/$BUILDNAME

debug "Creating $DESTGCCARCH"
mkdir -v $DESTGCCARCH

if [ -d $DESTGCCARCH/host ]
then
        verbose "Using GCC $DESTGCCARCH"
        echo -n "It looks like gcc has already been built for $DESTGCCARCH - Delete the existing compiler and re-build it? [Y/n] "
        read ANSWER

        if isyes $ANSWER
        then
            rm -rf $DESTGCCARCH/*
        else
            echo "Quitting..."
            cleanup
            exit 1
        fi
fi

debug_pause "make BASE_DIR=\"$DESTGCCARCH\""
make BASE_DIR="$DESTGCCARCH"
RET=$?
cleanup

if [ $RET == 0 ]
then
    # If the architecture name was changed from the original value in the .config file,
    # go through all the symlinks and re-name them to the specified architecture name.
    if [ "$ARCH" != "$ORIG_ARCH" ]
    then
        for LINK in $(ls /opt/gcc/$ARCH/host/usr/bin/$ORIG_ARCH-linux-*)
        do
            FDIR=$(dirname $LINK)
            FNAME=$(basename $LINK | sed -e "s/$ORIG_ARCH/$ARCH/")
            mv $LINK $FDIR/$FNAME
        done
    fi

    debug_pause "Ready to try and build termcap"
    cd /opt/src/termcap
    tar -zxvf termcap-1.3.1.tar.gz && cd termcap-1.3.1
    #cross-compile $ARCH && cp libtermcap.a /opt/gcc/$ARCH/host/usr/$ORIG_ARCH-linux/sysroot/usr/lib/libtermcap.a
    export MYARCH=$ARCH
    cross-compile && cp -v libtermcap.a /opt/gcc/$ARCH/host/usr/$ORIG_ARCH-linux/sysroot/usr/lib/libtermcap.a
    cd .. && rm -rf termcap-1.3.1

    echo "GCC successfully compiled and saved to '/opt/gcc/$ARCH/host/usr/bin/'"
else
    echo "GCC build failed!"
fi

exit $RET

